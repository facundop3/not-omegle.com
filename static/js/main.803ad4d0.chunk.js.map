{"version":3,"sources":["Components/InfoTextArea.js","Components/SweetInput.js","Components/JoinCreate.js","App.js","serviceWorker.js","index.js"],"names":["InfoTextArea","_ref","label","handlechange","value","react_default","a","createElement","onChange","InputText","styled","input","_templateObject","iconStyle","position","padding","right","Container","div","_templateObject2","bgColor","SweetInput","props","_props$iconColor","iconColor","_props$placeholder","placeholder","_props$faIcon","faIcon","handleSubmit","cleanAfter","hotAction","handleChange","hotValue","_useState","useState","_useState2","Object","slicedToArray","inputValue","setInputValue","handleClick","ev","target","focus","onSubmit","preventDefault","style","index_es","color","icon","onClick","type","_ref2","JoinCreate_templateObject","Button","button","JoinCreate_templateObject2","JoinCreate","initiator","JoinCreate_Container","App","setIsInitiator","_useState3","Peer","trickle","_useState4","peer","setPeer","_useState5","_useState6","yourId","setYourId","_useState7","_useState8","otherId","setOtherId","_useState9","_useState10","messagesList","setMessagesList","videoTag","useRef","useEffect","on","data","JSON","stringify","decodedMessage","TextDecoder","decode","prev","concat","toConsumableArray","stream","current","srcObject","play","navigator","getUserMedia","video","audio","err","alert","className","Components_JoinCreate","Components_InfoTextArea","other","parse","signal","Components_SweetInput","message","send","map","msg","width","height","ref","Boolean","window","location","hostname","match","library","add","faTimes","faPaperPlane","faWindowMinimize","faSearch","faUserAstronaut","faFrownOpen","faSquare","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.803ad4d0.chunk.js","sourcesContent":["import React from 'react'\n\nconst InfoTextArea = ({label, handlechange, value}) => {\n  return (\n    <div>\n      <label>{label}</label>\n      <br/>\n      <textarea\n        value={value}\n        onChange={handlechange}\n      ></textarea>\n    </div>\n  )\n\n}\n\nexport default InfoTextArea","import React, {useState} from 'react'\nimport styled from 'styled-components'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nconst InputText = styled.input`\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  background-color: white;\n  border: 1.5px solid grey;\n  border-radius:5px;\n  padding: 5.5px;\n  outline: none;\n`\n\nconst iconStyle = {\n  position:\"absolute\", \n  padding: \"5.5px\",\n  right: 0,\n}\n\n\nconst Container = styled.div`\n    border-radius:5px;\n    width: 100%;\n    background-color: ${({bgColor})=> bgColor};\n    padding:  .5em;\n    box-sizing: border-box;\n`\n\n\nconst SweetInput = (props) => {\n  const { iconColor=\"#2ca5e0\", \n          placeholder=\"\", \n          faIcon=\"paper-plane\", \n          handleSubmit, \n          cleanAfter, \n          bgColor, \n          hotAction,\n          handleChange,\n          hotValue} = props\n\n  const [inputValue, setInputValue] = useState('')\n  const handleInput = ({target:{value}}) => {\n    setInputValue(value)\n  }\n  const handleClick = ev => ev.target.focus()\n  const preventDefault = ev =>{\n    ev.preventDefault()\n    handleSubmit && handleSubmit(inputValue)\n    setInputValue(cleanAfter ? '' : inputValue)\n\n  }\n  return (\n    <Container bgColor={bgColor}>\n      <form onSubmit={preventDefault} style={{position:\"relative\"}}>\n      <FontAwesomeIcon\n        color={iconColor}\n        icon={faIcon} \n        style={iconStyle}\n        onClick={handleSubmit}\n        />\n        {\n           hotAction?\n            <InputText\n              type=\"text\"\n              onChange={handleChange}\n              value={hotValue}\n              placeholder={placeholder}\n              onClick={handleClick}\n            />\n            :\n            <InputText\n              type=\"text\"\n              onChange={handleInput}\n              value={inputValue}\n              placeholder={placeholder}\n              onClick={handleClick}\n            />\n        }\n      </form>\n    </Container>\n  )\n}\n\nexport default SweetInput","import React from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\nconst Button = styled.button`\n    padding: .5em;\n\n`\n\nconst JoinCreate = ({initiator, onClick}) => {\n\n  return (\n    <Container>\n      <div>\n        <h1>{ initiator ? \"Create a video call room\" : \"Join a video call room\"}</h1>\n        <Button onClick={onClick}>\n          Or {!initiator ? \"Create a video call room\" : \"Join a video call room\"}\n        </Button>\n      </div>\n    </Container>\n  )\n}\n\nexport default JoinCreate","import React, {useState, useEffect, useRef} from 'react';\nimport './App.css';\nimport  Peer from 'simple-peer'\n\nimport InfoTextArea  from './Components/InfoTextArea'\nimport SweetInput from './Components/SweetInput'\nimport JoinCreate from './Components/JoinCreate'\n\nfunction App() {\n const [initiator, setIsInitiator] = useState(true)\n const [peer, setPeer] = useState(new Peer({\n   initiator,\n   trickle: false\n }))\n const [yourId, setYourId] = useState('')\n const [otherId, setOtherId] = useState('')\n const [messagesList, setMessagesList] = useState([])\n const videoTag = useRef(null)\n useEffect(() =>{\n   setPeer(new Peer({\n     initiator,\n     trickle: false\n   }))\n }, [initiator])\n\n\n useEffect(() =>{\n   setYourId(\"\")\n   peer.on('signal', (data)=> setYourId(JSON.stringify(data)))\n   peer.on('data', (data)=> {\n     const decodedMessage = new TextDecoder(\"utf-8\").decode(data)\n     setMessagesList(prev => [...prev, decodedMessage])}\n   )\n   peer.on(\"stream\", stream => {\n    videoTag.current.srcObject=stream;\n    videoTag.current.play();\n   })\n }, [peer])\n\n useEffect(()=>{\n   navigator.getUserMedia({video: true, audio: true,}, function(stream){\n    setPeer(new Peer({\n      initiator,\n      trickle: false,\n      stream\n    }))\n   }, function(err){\n     alert(\"Webrtc not supported on current browser\", err)\n   })\n }, [initiator])\n\n const handleConnect = () =>{\n   const other = JSON.parse(otherId)\n   peer.signal(other)\n\n }\n const handleToggle = () =>{\n   setIsInitiator(!initiator)\n }\n const handleSend = (message) => {\n   peer.send(message)\n }\n\n return (\n   <div className=\"App\">\n     <header className=\"App-header\">\n      <JoinCreate  onClick={handleToggle} initiator={initiator}/>\n       <InfoTextArea label=\"Your Id: \" value={yourId}/>\n       <InfoTextArea label=\"Other Id: \" value={otherId} handlechange={({target:{value}})=> setOtherId(value)}/>\n       <button onClick={handleConnect}>Connect</button>\n\n        <SweetInput handleSubmit={handleSend} placeholder=\"Input your message\"/>\n       {\n         messagesList.map(msg => <h1>{msg}</h1>)\n       }\n      <video width=\"750\" height=\"500\" ref={videoTag} />\n     </header>\n   </div>\n );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// Font Awesome stuff \nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTimes, faPaperPlane, faWindowMinimize, faSearch, faUserAstronaut, faFrownOpen, faSquare } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTimes, faPaperPlane,faWindowMinimize, faSearch, faUserAstronaut, faFrownOpen, faSquare)\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}