{"version":3,"sources":["Components/InfoTextArea.js","Components/InputMessage.js","App.js","serviceWorker.js","index.js"],"names":["InfoTextArea","_ref","label","handlechange","value","react_default","a","createElement","onChange","InputMessage","handleSend","_useState","useState","_useState2","Object","slicedToArray","messageValue","setMessageValue","ev","target","onClick","App","initiator","setIsInitiator","_useState3","Peer","trickle","_useState4","peer","setPeer","_useState5","_useState6","yourId","setYourId","_useState7","_useState8","otherId","setOtherId","_useState9","_useState10","messagesList","setMessagesList","_useState11","_useState12","videoTag","useRef","useEffect","on","data","JSON","stringify","decodedMessage","TextDecoder","decode","prev","concat","toConsumableArray","stream","current","srcObject","play","navigator","getUserMedia","video","audio","err","alert","className","String","Components_InfoTextArea","other","parse","signal","Components_InputMessage","message","send","map","msg","width","height","ref","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e80c11cc.chunk.js","sourcesContent":["import React from 'react'\n\nconst InfoTextArea = ({label, handlechange, value}) => {\n  return (\n    <div>\n      <label>{label}</label>\n      <textarea\n        value={value}\n        onChange={handlechange}\n      ></textarea>\n    </div>\n  )\n\n}\n\nexport default InfoTextArea","import React, {useState} from 'react'\nconst InputMessage = ({label, handleSend}) => {\n  const [messageValue, setMessageValue] = useState(\"\")\n\n  const handlechange = ev =>{\n    setMessageValue(ev.target.value)\n  }\n  const handleClickSend = () => {\n    handleSend(messageValue)\n  }\n\n  return (\n    <div>\n      <label>{label}</label>\n      <textarea\n        value={messageValue}\n        onChange={handlechange}\n      ></textarea>\n      <button onClick={handleClickSend}>Send</button>\n    </div>\n  )\n\n}\n\nexport default InputMessage","import React, {useState, useEffect, useRef} from 'react';\nimport './App.css';\nimport  Peer from 'simple-peer'\n\nimport InfoTextArea  from './Components/InfoTextArea'\nimport InputMessage  from './Components/InputMessage'\n\nfunction App() {\n const [initiator, setIsInitiator] = useState(true)\n const [peer, setPeer] = useState(new Peer({\n   initiator,\n   trickle: false\n }))\n const [yourId, setYourId] = useState('')\n const [otherId, setOtherId] = useState('')\n const [messagesList, setMessagesList] = useState([])\n const [myStream, setMyStream] = useState('')\n const videoTag = useRef(null)\n useEffect(() =>{\n   setPeer(new Peer({\n     initiator,\n     trickle: false\n   }))\n }, [initiator])\n\n\n useEffect(() =>{\n   setYourId(\"\")\n   peer.on('signal', (data)=> setYourId(JSON.stringify(data)))\n   peer.on('data', (data)=> {\n     const decodedMessage = new TextDecoder(\"utf-8\").decode(data)\n     setMessagesList(prev => [...prev, decodedMessage])}\n   )\n   peer.on(\"stream\", stream => {\n    videoTag.current.srcObject=stream;\n    videoTag.current.play();\n   })\n }, [peer])\n\n useEffect(()=>{\n   navigator.getUserMedia({video: true, audio: true,}, function(stream){\n    setPeer(new Peer({\n      initiator,\n      trickle: false,\n      stream\n    }))\n   }, function(err){\n     alert(\"Webrtc not supported on current browser\")\n   })\n }, [])\n\n const handleConnect = () =>{\n   const other = JSON.parse(otherId)\n   peer.signal(other)\n\n }\n const handleToggle = () =>{\n   setIsInitiator(!initiator)\n }\n const handleSend = (message) => {\n   peer.send(message)\n }\n\n return (\n   <div className=\"App\">\n     <header className=\"App-header\">\n       <p>\n         Initiator : {String(initiator)}\n         <button onClick={handleToggle }>toglle it</button>\n       </p>\n       <InfoTextArea label=\"Your Id: \" value={yourId}/>\n       <InfoTextArea label=\"Other Id: \" value={otherId} handlechange={({target:{value}})=> setOtherId(value)}/>\n       <button onClick={handleConnect}>Connect</button>\n       <InputMessage label=\"Input your message\" handleSend={handleSend}/>\n       {\n         messagesList.map(msg => <h1>{msg}</h1>)\n       }\n      <video width=\"750\" height=\"500\" ref={videoTag} />\n     </header>\n   </div>\n );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}